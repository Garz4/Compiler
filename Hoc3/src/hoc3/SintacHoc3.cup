/*
 * MIT License
 * 
 * Copyright (c) 2021 Uriel Rivas
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * https://github.com/Garz4/compilers/blob/master/LICENSE
 */

package hoc3;
import java_cup.runtime.*;
import java.io.FileReader;
import java.lang.Math;

class AnalizadorSintactico;

parser code {:
    Main interfaz;
    Float variables[] = new Float[26];

    public void report_error(String mensaje, Object info) {
        StringBuilder m = new StringBuilder("Error");

        if(info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = (java_cup.runtime.Symbol) info;

            if(s.left >= 0) {
                m.append(" en la lÃ­nea " + (s.left+1));
                
                if(s.right >= 0) {
                    m.append(", columna " + (s.right+1));
                }
            }
        }
        
        m.append(": " + mensaje);
        System.err.println(m);
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }
:}

terminal OpSuma, OpResta, OpProd, OpDiv, OpAsig, OpExp;
terminal ParIzq, ParDer, Enter;
terminal Float NUM;
terminal SEN, COS, TAN, SQRT, LOG, LOGG, SEC, CSC, COT;
terminal Integer VAR;
terminal UMINUS;

non terminal list;
non terminal Float asgn, expr;

precedence left OpSuma, OpResta;
precedence left OpProd, OpDiv;
precedence left OpExp;
precedence left SEN, COS, TAN, SQRT, LOG, LOGG, SEC, CSC, COT;
precedence left UMINUS;

list    ::= /* nada */
        | Enter
        | list expr:e                       {: interfaz.PonerTextoSintact(Float.toString(e) + "\n"); :}
        | list expr:e Enter                 {: interfaz.PonerTextoSintact(Float.toString(e) + "\n"); :}
        ;

asgn    ::= VAR:indVar OpAsig expr:valExpr  {: RESULT = variables[indVar] = valExpr; :}
        ;

expr    ::= NUM:valNum                      {: RESULT = valNum; :}
        | VAR:indVar                        {: RESULT = variables[indVar]; :}
        | asgn:valAsgn                      {: RESULT = valAsgn; :}
        | SEN ParIzq expr:e ParDer          {: RESULT = (float)Math.sin(e); :}
        | COS ParIzq expr:e ParDer          {: RESULT = (float)Math.cos(e); :}
        | TAN ParIzq expr:e ParDer          {: RESULT = (float)Math.tan(e); :}
        | SQRT ParIzq expr:e ParDer         {: RESULT = (float)Math.sqrt(e); :}
        | LOG ParIzq expr:e ParDer          {: RESULT = (float)Math.log(e); :}
        | LOGG ParIzq expr:e ParDer         {: RESULT = (float)Math.log10(e); :}
        | SEC ParIzq expr:e ParDer          {: RESULT = 1/(float)Math.cos(e); :}
        | CSC ParIzq expr:e ParDer          {: RESULT = 1/(float)Math.sin(e); :}
        | COT ParIzq expr:e ParDer          {: RESULT = 1/(float)Math.tan(e); :}
        | expr:e1 OpSuma expr:e2            {: RESULT = e1+e2; :}
        | expr:e1 OpResta expr:e2           {: RESULT = e1-e2; :}
        | expr:e1 OpProd expr:e2            {: RESULT = e1*e2; :}
        | expr:e1 OpDiv expr:e2             {: RESULT = e1/e2; :}
        | expr:e1 OpExp expr:e2             {: RESULT = (float)Math.pow(e1, e2); :} %prec OpExp
        | ParIzq expr:e ParDer              {: RESULT = e; :}
        | OpResta expr:e                    {: RESULT = -e; :} %prec UMINUS
        ;
